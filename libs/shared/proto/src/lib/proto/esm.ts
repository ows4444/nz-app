// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.7.2
//   protoc               v5.29.3
// source: esm.proto

/* eslint-disable */
import { Metadata } from '@grpc/grpc-js';
import { GrpcMethod, GrpcStreamMethod } from '@nestjs/microservices';
import { Observable } from 'rxjs';

export const protobufPackage = 'esm';

export interface ESMRequest {
  esmId: string;
}

export interface ESMResponse {
  esmId: string;
  /** e.g., "email", "sms", "push" */
  esmType: string;
  /** The content of the ESM */
  content: string;
  /** e.g., "sent", "delivered", "failed" */
  status: string;
  /** ISO 8601 format */
  timestamp: string;
  /** ID of the recipient */
  recipientId: string;
}

export const ESM_PACKAGE_NAME = 'esm';

export interface ESMServiceClient {
  getEsmInfo(request: ESMRequest, metadata?: Metadata): Observable<ESMResponse>;
}

export interface ESMServiceController {
  getEsmInfo(request: ESMRequest, metadata?: Metadata): Promise<ESMResponse> | Observable<ESMResponse> | ESMResponse;
}

export function ESMServiceControllerMethods() {
  return function (constructor: Function) {
    const grpcMethods: string[] = ['getEsmInfo'];
    for (const method of grpcMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcMethod('ESMService', method)(constructor.prototype[method], method, descriptor);
    }
    const grpcStreamMethods: string[] = [];
    for (const method of grpcStreamMethods) {
      const descriptor: any = Reflect.getOwnPropertyDescriptor(constructor.prototype, method);
      GrpcStreamMethod('ESMService', method)(constructor.prototype[method], method, descriptor);
    }
  };
}

export const ESM_SERVICE_NAME = 'ESMService';
