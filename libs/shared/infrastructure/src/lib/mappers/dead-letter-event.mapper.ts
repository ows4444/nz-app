import { DeadLetterEventEntity } from '@nz/shared-domain';
import { DeadLetterEventEntityORM } from '../entities';

export class DeadLetterEventMapper {
  static toDomain(deadLetterEvent: DeadLetterEventEntityORM): DeadLetterEventEntity {
    return DeadLetterEventEntity.restore({
      id: deadLetterEvent.id,
      aggregateId: deadLetterEvent.aggregateId,
      aggregateType: deadLetterEvent.aggregateType,
      availableAt: deadLetterEvent.availableAt,
      eventScope: deadLetterEvent.eventScope,
      eventType: deadLetterEvent.eventType,
      eventVersion: deadLetterEvent.eventVersion,
      maxRetryAttempts: deadLetterEvent.maxRetryAttempts,
      payload: deadLetterEvent.payload,
      priority: deadLetterEvent.priority,
      processingAttempts: deadLetterEvent.processingAttempts,
      canRetry: deadLetterEvent.canRetry,
      eventSource: deadLetterEvent.eventSource,
      originalEventId: deadLetterEvent.originalEventId,
      originalPriority: deadLetterEvent.originalPriority,
      originalCreatedAt: deadLetterEvent.originalCreatedAt,
      failureReason: deadLetterEvent.failureReason,
      originalAvailableAt: deadLetterEvent.originalAvailableAt,
      failureCode: deadLetterEvent.failureCode,
      failureDetails: deadLetterEvent.failureDetails,
      totalAttempts: deadLetterEvent.totalAttempts,
      firstFailedAt: deadLetterEvent.firstFailedAt,
      lastFailedAt: deadLetterEvent.lastFailedAt,
      lastProcessorId: deadLetterEvent.lastProcessorId,
      reprocessed: deadLetterEvent.reprocessed,
      failureCategory: deadLetterEvent.failureCategory,
      reprocessedAt: deadLetterEvent.reprocessedAt,
      reprocessedEventId: deadLetterEvent.reprocessedEventId,
      reprocessedBy: deadLetterEvent.reprocessedBy,
      resolutionNotes: deadLetterEvent.resolutionNotes,
      status: deadLetterEvent.status,
      causationId: deadLetterEvent.causationId,
      correlationId: deadLetterEvent.correlationId,
      createdByService: deadLetterEvent.createdByService,
      createdByUserId: deadLetterEvent.createdByUserId,
      errorDetails: deadLetterEvent.errorDetails,
      expiresAt: deadLetterEvent.expiresAt,
      lastErrorAt: deadLetterEvent.lastErrorAt,
      lastErrorCode: deadLetterEvent.lastErrorCode,
      lastErrorMessage: deadLetterEvent.lastErrorMessage,
      lockedAt: deadLetterEvent.lockedAt,
      messageId: deadLetterEvent.messageId,
      metadata: deadLetterEvent.metadata,
      payloadSchemaVersion: deadLetterEvent.payloadSchemaVersion,
      processedAt: deadLetterEvent.processedAt,
      processorId: deadLetterEvent.processorId,
      sourceTenantId: deadLetterEvent.sourceTenantId,
      targetTenantId: deadLetterEvent.targetTenantId,
      createdAt: deadLetterEvent.createdAt,
      updatedAt: deadLetterEvent.updatedAt,
    });
  }

  static toPersistence(deadLetterEvent: DeadLetterEventEntity): Partial<DeadLetterEventEntityORM> {
    return {
      id: deadLetterEvent.id,
      aggregateId: deadLetterEvent.aggregateId,
      aggregateType: deadLetterEvent.aggregateType,
      availableAt: deadLetterEvent.availableAt,
      eventScope: deadLetterEvent.eventScope,
      eventType: deadLetterEvent.eventType,
      eventVersion: deadLetterEvent.eventVersion,
      maxRetryAttempts: deadLetterEvent.maxRetryAttempts,
      payload: deadLetterEvent.payload,
      priority: deadLetterEvent.priority,
      processingAttempts: deadLetterEvent.processingAttempts,
      canRetry: deadLetterEvent.canRetry,
      eventSource: deadLetterEvent.eventSource,
      originalEventId: deadLetterEvent.originalEventId,
      originalPriority: deadLetterEvent.originalPriority,
      originalCreatedAt: deadLetterEvent.originalCreatedAt,
      failureReason: deadLetterEvent.failureReason,
      originalAvailableAt: deadLetterEvent.originalAvailableAt,
      failureCode: deadLetterEvent.failureCode,
      failureDetails: deadLetterEvent.failureDetails,
      totalAttempts: deadLetterEvent.totalAttempts,
      firstFailedAt: deadLetterEvent.firstFailedAt,
      lastFailedAt: deadLetterEvent.lastFailedAt,
      lastProcessorId: deadLetterEvent.lastProcessorId,
      reprocessed: deadLetterEvent.reprocessed,
      failureCategory: deadLetterEvent.failureCategory,
      reprocessedAt: deadLetterEvent.reprocessedAt,
      reprocessedEventId: deadLetterEvent.reprocessedEventId,
      reprocessedBy: deadLetterEvent.reprocessedBy,
      resolutionNotes: deadLetterEvent.resolutionNotes,
      status: deadLetterEvent.status,
      causationId: deadLetterEvent.causationId,
      correlationId: deadLetterEvent.correlationId,
      createdByService: deadLetterEvent.createdByService,
      createdByUserId: deadLetterEvent.createdByUserId,
      errorDetails: deadLetterEvent.errorDetails,
      expiresAt: deadLetterEvent.expiresAt,
      lastErrorAt: deadLetterEvent.lastErrorAt,
      lastErrorCode: deadLetterEvent.lastErrorCode,
      lastErrorMessage: deadLetterEvent.lastErrorMessage,
      lockedAt: deadLetterEvent.lockedAt,
      messageId: deadLetterEvent.messageId,
      metadata: deadLetterEvent.metadata,
      payloadSchemaVersion: deadLetterEvent.payloadSchemaVersion,
      processedAt: deadLetterEvent.processedAt,
      processorId: deadLetterEvent.processorId,
      sourceTenantId: deadLetterEvent.sourceTenantId,
      targetTenantId: deadLetterEvent.targetTenantId,
      createdAt: deadLetterEvent.createdAt,
      updatedAt: deadLetterEvent.updatedAt,
    };
  }
}
